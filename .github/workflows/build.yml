name: Build & Release io

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: npm run build

      - name: Build Electron app
        run: npm run build:electron -- --publish=never

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-build-${{ matrix.os }}
          path: dist-electron/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-all

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          token: ${{ secrets.GH_PAT }}

      - name: Find Windows build
        id: win
        run: |
          FILE=$(find dist-all/electron-build-windows-latest -maxdepth 1 -name '*.exe' | head -n 1)
          echo "FILE<<EOF" >> $GITHUB_OUTPUT
          echo "$FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload Windows build
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.win.outputs.FILE }}
          asset_name: io-windows.exe
          asset_content_type: application/octet-stream

      - name: Find Mac build
        id: mac
        run: |
          FILE=$(find dist-all/electron-build-macos-latest -maxdepth 1 -name '*.dmg' | head -n 1)
          echo "FILE<<EOF" >> $GITHUB_OUTPUT
          echo "$FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload Mac build
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.mac.outputs.FILE }}
          asset_name: io-mac.dmg
          asset_content_type: application/octet-stream

      - name: Find Linux build
        id: linux
        run: |
          FILE=$(find dist-all/electron-build-ubuntu-latest -maxdepth 1 -name '*.AppImage' | head -n 1)
          echo "FILE<<EOF" >> $GITHUB_OUTPUT
          echo "$FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload Linux build
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.linux.outputs.FILE }}
          asset_name: io-linux.AppImage
          asset_content_type: application/octet-stream

      - name: Generate download-links.json
        run: |
          echo '{
            "windows": "https://github.com/io-browser/io/releases/latest/download/io-windows.exe",
            "mac": "https://github.com/io-browser/io/releases/latest/download/io-mac.dmg",
            "linux": "https://github.com/io-browser/io/releases/latest/download/io-linux.AppImage"
          }' > public/download-links.json
